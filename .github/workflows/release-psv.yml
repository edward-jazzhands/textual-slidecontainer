name: Continuous Delivery

on:
  push:
    branches:
      - main

# default: least privileged permissions across all jobs
permissions:
  contents: read

jobs:
  # RELEASE JOB: Handles version bumping, tagging, and GitHub releases
  # This job analyzes commits, determines version changes, and creates releases
  release:
    runs-on: ubuntu-latest
    # Concurrency control: ensures only one release workflow runs at a time per branch
    # This prevents race conditions where multiple releases could be created simultaneously
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    # Enhanced permissions needed for this job to commit version changes and create releases
    permissions:
      contents: write

    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      
      # CHECKOUT: Gets full git history (fetch-depth: 0) which Python Semantic Release
      # needs to analyze all commits and determine proper version bumping
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      # SAFETY RESET: Ensures we're releasing exactly what triggered the workflow
      # Even if someone pushed new commits while this workflow was running
      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        # This prevents releasing changes that weren't properly evaluated.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      # SEMANTIC RELEASE: The heart of the workflow - analyzes commit messages
      # (following conventional commits), determines version bump type, updates version files,
      # creates git tags, and generates GitHub releases
      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      # GITHUB RELEASE ASSETS: Only runs if a release was actually created
      # Uploads built distribution files to the GitHub release
      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.2.0
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      # ARTIFACT STORAGE: Saves built distribution files for the deploy job
      # These artifacts will be downloaded by the deploy job to publish to PyPI
      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  # DEPLOY JOB: Handles PyPI publishing with separation of concerns
  # Runs as separate job with minimal permissions for security best practices
  deploy:
    # 1. Separate out the deploy step from the publish step to run each step at
    #    the least amount of token privilege
    # 2. Also, deployments can fail, and its better to have a separate job if you need to retry
    #    and it won't require reversing the release.
    runs-on: ubuntu-latest
    # JOB DEPENDENCY: Waits for release job to complete successfully
    needs: release
    # CONDITIONAL EXECUTION: Only runs if the release job actually created a release
    if: ${{ needs.release.outputs.released == 'true' }}

    # MINIMAL PERMISSIONS: Only what's needed for PyPI publishing
    # id-token: write enables trusted publishing (no API keys needed!)
    permissions:
      contents: read
      id-token: write

    steps:
      # ARTIFACT RETRIEVAL: Downloads the distribution files created in the release job
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      # ------------------------------------------------------------------- #
      # Python Semantic Release is not responsible for publishing your      #
      # python artifacts to PyPI. Use the official PyPA publish action      #
      # instead. The following steps are an example but is not guaranteed   #
      # to work as the action is not maintained by the                      #
      # python-semantic-release team.                                       #
      # ------------------------------------------------------------------- #

      # PYPI PUBLISHING: Uses PyPA's official action with trusted publishing
      # This eliminates the need for API keys and uses OIDC tokens instead
      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@@SHA1_HASH  # vX.X.X
        with:
          packages-dir: dist
          print-hash: true
          verbose: true